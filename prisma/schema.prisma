// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  username       String      @unique
  hashedPassword String      @map("hashed_password")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  activity       Activity[]
  interview      Interview[]
  goal           Goal?

  @@index([username])
}

model Goal {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  seconds   Int?
  questions Int?
  endDate   DateTime
  beginAt   DateTime @default(now())

  @@unique([userId])
}

model Activity {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  questions Int      @default(0)
  seconds   Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, date])
  @@index([userId])
}

model Question {
  id          Int         @id // questionNumber
  title       String
  accuracy    Float
  testCases   Json
  starterCode Json
  solutions   Json
  article     String
  topics      Topic[]
  prompt      String
  companies   Company[]
  difficulty  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  titleSlug   String?
  interviews  Interview[]
}

model Interview {
  id             String    @id
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages       Json
  questionNumber Int
  question       Question  @relation(fields: [questionNumber], references: [id], onDelete: Cascade)
  code           String?
  codeLanguage   Language
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  completed      Boolean   @default(false)
  feedback       Feedback?
}

model Feedback {
  id             String    @id @default(uuid())
  interviewId    String    @unique
  interview      Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  feedback       String
  feedbackNumber Int // Rating or score for the interview feedback (0-5, -1 being no feedbackNumber)
}

enum Company {
  GOOGLE
  AMAZON
  META
  MICROSOFT
  BLOOMBERG
  APPLE
  UBER
  ADOBE
  TIKTOK
  ORACLE
  LINKEDIN
  NVIDIA
  ROBLOX
  INTUIT
}

enum Language {
  CSHARP
  CPP
  JAVA
  PYTHON
  JAVASCRIPT
}

enum Topic {
  ARRAY
  STRING
  HASH_TABLE
  DYNAMIC_PROGRAMMING
  MATH
  SORTING
  GREEDY
  DEPTH_FIRST_SEARCH
  BINARY_SEARCH
  DATABASE
  MATRIX
  TREE
  BREADTH_FIRST_SEARCH
  BIT_MANIPULATION
  TWO_POINTERS
  PREFIX_SUM
  HEAP_PRIORITY_QUEUE
  SIMULATION
  BINARY_TREE
  STACK
  GRAPH
  COUNTING
  SLIDING_WINDOW
  DESIGN
  ENUMERATION
  BACKTRACKING
  UNION_FIND
  LINKED_LIST
  NUMBER_THEORY
  ORDERED_SET
  MONOTONIC_STACK
  SEGMENT_TREE
  TRIE
  COMBINATORICS
  BITMASK
  RECURSION
  QUEUE
  DIVIDE_AND_CONQUER
  BINARY_INDEXED_TREE
  MEMOIZATION
  BINARY_SEARCH_TREE
  GEOMETRY
  HASH_FUNCTION
  STRING_MATCHING
  TOPOLOGICAL_SORT
  SHORTEST_PATH
  ROLLING_HASH
  GAME_THEORY
  INTERACTIVE
  DATA_STREAM
  MONOTONIC_QUEUE
  BRAINTEASER
  DOUBLY_LINKED_LIST
  MERGE_SORT
  RANDOMIZED
  COUNTING_SORT
  ITERATOR
  CONCURRENCY
  QUICKSELECT
  LINE_SWEEP
  PROBABILITY_AND_STATISTICS
  SUFFIX_ARRAY
  BUCKET_SORT
  MINIMUM_SPANNING_TREE
  SHELL
  RESERVOIR_SAMPLING
  RADIX_SORT
  EULERIAN_CIRCUIT
  STRONGLY_CONNECTED_COMPONENT
  REJECTION_SAMPLING
  BICONNECTED_COMPONENT
}
