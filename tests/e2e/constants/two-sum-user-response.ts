const TWO_SUM_USER_RESPONSE =
  'Problem Recap\nGiven an array of integers and a target sum, find two distinct indices in the array such that the numbers at those indices add up to the target. Return the indices.\nStep-by-Step Solution Approach\n1. Understand the Problem\nInput: An array of integers, e.g., [2, 7, 11, 15], and a target sum, e.g., 9.\nOutput: Indices of two numbers that add up to the target, e.g., [0, 1] because 2 + 7 = 9.\n2. Brute Force Approach\nFor each element, check every other element to see if their sum equals the target.\nThis is simple but inefficient (O(nÂ²) time complexity).\n3. Optimized Approach\nUse a hash map (dictionary) to store numbers and their indices as we iterate through the array.\nFor each number, calculate its complement (target - current number).\nCheck if the complement exists in the hash map:\nIf yes, we found the pair.\nIf no, add the current number and its index to the hash map.\nThis approach reduces the time complexity to O(n).\n4. Edge Cases\nWhat if there are duplicate numbers?\nWhat if no solution exists?\nWhat if the array is empty or has only one element?\n5. Return Value\nReturn the indices as soon as a valid pair is found.\nIf no pair is found, decide whether to return an empty list, None, or raise an exception (based on requirements).\nSummary:\nI would solve Two Sum by iterating through the array once, using a hash map to track previously seen numbers and their indices, and checking for the complement at each step. This ensures an efficient and clear solution.';

export default TWO_SUM_USER_RESPONSE;
